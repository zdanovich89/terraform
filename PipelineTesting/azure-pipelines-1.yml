trigger: none
stages:
    # - stage: validate_Terrascan
    #   jobs:
    #   - job: Compliance
    #     displayName: 'Run Terrascan to check for compliance'
    #     pool: 
    #       vmImage: 'ubuntu-latest'
      
    #     steps:
    #     - script: |
    #         curl --location https://github.com/accurics/terrascan/releases/download/v1.3.1/terrascan_1.3.1_Linux_x86_64.tar.gz --output terrascan.tar.gz
    #         tar -xvf terrascan.tar.gz
    #         sudo install terrascan /usr/local/bin    
    #       displayName: 'Get tools'

    #     - script: |
    #         terrascan scan
    #       workingDirectory: '$(System.DefaultWorkingDirectory)/PipelineTesting'
    #       displayName: 'Run terrascan'
    #       continueOnError: true

    # - stage: validate_tfsec
    #   jobs:
    #   - job: Compliance
    #     displayName: 'Run tfsec to check for compliance'
    #     pool: 
    #       vmImage: 'ubuntu-latest'   
      
    #     steps:
    #     - script: |
    #         curl -L -o tfsec https://github.com/tfsec/tfsec/releases/latest/download/tfsec-linux-amd64
    #         chmod +x tfsec
    #         sudo mv tfsec /usr/local/bin/

    #     - script: |
    #         tfsec
    #       workingDirectory: '$(System.DefaultWorkingDirectory)/PipelineTesting'
    #       displayName: 'Run tfsec'
    #       continueOnError: true

    - stage: validate_terraform_compliance
      jobs:
      - job: Compliance
        displayName: 'Run terraform-compliance to check for compliance'
        pool: 
          vmImage: 'ubuntu-latest'
      
        steps:
        - script: |
            terraform init
            terraform plan -out=plan.out 
            docker pull eerkunt/terraform-compliance
            docker run --rm -v '$(System.DefaultWorkingDirectory)/PipelineTesting' eerkunt/terraform-compliance -f '$(System.DefaultWorkingDirectory)/PipelineTesting' -p plan.out

        # - script:
        #     chechov -d .
        #   workingDirectory: '$(System.DefaultWorkingDirectory)/PipelineTesting'
